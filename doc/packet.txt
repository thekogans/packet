libthekogans_packet models a secure, packet based application transport
protocol. One of the more novel implementation details is the key rotation
strategy.

Every [UDP | TCP]Tunnel starts off with a KeyRing containing a shared
master key. Throughout the lifetime of the tunnel, the peers on both sides
constantly negotiate, exchange and rotate keys. The design of the KeyRing
allows every packet to be encrypted and signed using a different key. As keys
become (over)used, they are dropped from the KeyRing and new ones take their
place.

The choice of shared keys means that libthekogans_packet is not suitable
for certain applications, namely those that require PKI to establish trust.

The design was motivated by the following goals:

- use the best industry practices (as of 2016) to resist various known attacks.
  - use of random length packet prefixes to resist known plaintext attacks.
  - use of explicit packet initialization vectors to resist BEAST.
  - encrypt then mac to resist POODLE.
  - compression is off by default to resist CRIME.
    NOTE: please make sure you know what you're doing before using compression.
  - use the strongest known algorithms:
    - [EC]DHE or RSA for key exchange.
    - [EC]DSA or RSA for authentication.
    - AES-[128 | 192 | 256]-[CBC | GCM] for symmetric encryption/decryption.
    - SHA2-[256 | 384 | 512] for mac.
  - https://defuse.ca/cbcmodeiv.htm
  - https://moxie.org/blog/the-cryptographic-doom-principle/
  - http://www.iacr.org/archive/crypto2001/21390309.pdf
  - http://www.educatedguesswork.org/2011/09/security_impact_of_the_rizzodu.html
  - https://vnhacker.blogspot.com/2011/09/beast.html
  - https://tools.ietf.org/html/rfc7457
  - http://www.slideshare.net/danrlde/20120418-luedtke-ssltlscbcbeast
- very little data is sent in the clear. specifically, no packet identifying
  information is sent in the clear.
- frame payload length is bound to allow for both udp and tcp transports and
  to thwart ddos attacks.
- unlimited (up to 4GB) packet length to support different application needs.
  fragmentation and reassembly is done by the library.
- support for both reliable (tcp) and unreliable (udp) transports.

The following ASCII art describes the structure of frames on the wire.
Each frame contains either a full packet or a packet fragment.

all 2 byte fields are of type thekogans::util::ui16 and are stored in big endian format.
all 4 byte fields are of type thekogans::util::ui32 and are stored in big endian format.
all 8 byte fields are of type thekogans::util::ui64 and are stored in big endian format.

|<----------------------frame----------------------->|
|<-----------plaintext------------>|<--ciphertext--->|
+--------------+-------------------+-----------------+
|              |                   |                 |
| frame header | ciphertext header |     payload     |
|              |                   |                 |
+--------------+-------------------+-----------------+
|     fhs      |        chs        | variable length |

|<-------frame header------->|
+--------+-------------------+
|        |                   |
| key id | ciphertext length |
|        |                   |
+--------+-------------------+
|   32   |         4         |

fhs = 36;

|<------------ciphertext header------------->|
+-----------+-------------------+------------+
|           |                   |            |
| iv length | ciphertext length | mac length |
|           |                   |            |
+-----------+-------------------+------------+
|     2     |         4         |     2      |

chs = 8

|<-----------------------payload---------------------->|
+-----------------+------------------+-----------------+
|                 |                  |                 |
|       iv        |    ciphertext    |       mac       |
|                 |                  |                 |
+-----------------+------------------+-----------------+
| variable length | variable length  | variable length |

Once verified and decrypted, ciphertext has the following plaintext structure:

|<------------------------------plaintext------------------------------>|
+------------------+-----------------+----------------+-----------------+
|                  |                 |                |                 |
| plaintext header |   random data   | session header |     packet      |
|                  |                 |                |                 |
+------------------+-----------------+----------------+-----------------+
|       pths       | variable length |      shs       | variable length |

|<--plaintext header--->|
+---------------+-------+
|               |       |
| random length | flags |
|               |       |
+---------------+-------+
|       1       |   1   |

pths = 2

if PlaintextHeader::flags contains FLAGS_SESSION_HEADER, Session::Header will follow.

|<-------session header------->|
+------------+-----------------+
|            |                 |
| session id | sequence number |
|            |                 |
+------------+-----------------+
|     16     |        8        |

shs = 24

if PlaintextHeader::flags contains FLAGS_COMPRESSED, the packet is inflated.

|<------------packet------------->|
+---------------+-----------------+
|               |                 |
| packet header |   packet data   |
|               |                 |
+---------------+-----------------+
|      phs      | variable length |

|<-------------------packet header------------------->|
+-------+-----------------+---------+-----------------+
|       |                 |         |                 |
| magic |       id        | version |      size       |
|       |                 |         |                 |
+-------+-----------------+---------+-----------------+
|   4   | variable length |    2    | variable length |

phs = 6 + id size + size size
